import json
import tiktoken


def generate_template_str(json_schema, indent=2, json7schema=False):
    """Generate an empty example from a JSON schema"""

    def process_schema(schema):
        if "type" not in schema:
            return None
        if isinstance(schema["type"], list):
            schema_type = schema["type"][0]
        else:
            schema_type = schema["type"]

        if schema_type == "object":
            properties = schema.get("properties", {})
            return {key: process_schema(value) for key, value in properties.items()}
        elif schema_type == "array":
            items_schema = schema.get("items", {})
            return [process_schema(items_schema)]
        elif schema_type == "string":
            return ""
        elif schema_type == "number" or schema_type == "integer":
            return 0
        elif schema_type == "boolean":
            return False
        elif schema_type == "null":
            return None
        else:
            return None

    if not json7schema:
        json_schema = process_schema(json_schema)
    schema_example_str = json.dumps(json_schema, indent=indent)
    return schema_example_str


def generate_synthetic_output_json(json_schema, indent=2):
    """
    Generate an empty example from a json schema. If the schema contains an array put 20 empty objects in the array.
    The point of this function is to create a json object that can be an estimate of the output generated by the model.
    For strings - set value 'X'x100
    For numbers - set value 1000000000
    """

    def generate_example_recursive(sub_schema):
        if 'type' not in sub_schema:
            return None
        if isinstance(sub_schema['type'], list):
            t = sub_schema['type'][0]  # get the first type if there's a list of possible types
        else:
            t = sub_schema['type']

        if t == 'object':
            obj = {}
            for prop, prop_schema in sub_schema.get('properties', {}).items():
                obj[prop] = generate_example_recursive(prop_schema)
            return obj
        elif t == 'array':
            if "items" not in sub_schema:
                return []
            return [generate_example_recursive(sub_schema['items']) for _ in range(5)]
        elif t == 'string':
            return 'X' * 20
        elif t == 'number':
            return 1000
        elif t == 'null':
            return None
        else:
            return None

    return json.dumps(generate_example_recursive(json_schema), indent=indent)


def num_tokens_from_string(string: str, encoding_name: str = "cl100k_base") -> int:
    """Returns the number of tokens in a text string."""
    encoding = tiktoken.get_encoding(encoding_name)
    num_tokens = len(encoding.encode(string))
    return num_tokens
